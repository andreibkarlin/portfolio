//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Misc/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""2a04e382-928c-4cc7-9a8d-890838a13e36"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""0600c953-f01f-4936-af95-8f4d02bd4ad2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""87c8fcd7-ca3f-42f1-893e-0395b9efd5bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""fb36890a-7876-4770-9800-8913a0fae3ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""f81114f6-2e83-44ef-ae16-d82e241c419e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""d1c5655d-f408-4d7e-9255-79c5947ee5f4"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""a7f14703-580c-4237-81dd-a0ecec933516"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""487d0184-41e7-4e2b-8aee-4f1fbc41ac2e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EraseDrag"",
                    ""type"": ""Button"",
                    ""id"": ""d8f22cf6-2b7f-4ff8-a24e-ccdf5dd4f68d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Next Turn"",
                    ""type"": ""Button"",
                    ""id"": ""392aeadf-6d75-45e4-8b2b-57218e19aeb8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Deselect"",
                    ""type"": ""Button"",
                    ""id"": ""ea7274cd-16d6-4483-bfa2-75a3320643bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""8a04b9ed-68af-41fe-9a8f-a1f61ee52426"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6b35b8d2-878f-4f38-94e8-6fa416939ef7"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""445604b7-6f6a-4c24-8d9f-de4041e4dad8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab1159ce-ad08-4030-a404-464ef98523c4"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57b80110-5492-4224-ab3e-fa557383a74f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d78a07e-1729-4b99-95c3-ed0fa7d408b3"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3acca89a-1d6f-4ea5-8d11-45cfe7a17532"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""209f549f-4c37-4c60-8768-2714928739ec"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b98c197f-aeff-460c-bf93-163442908bb1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a0ffd22f-9769-4d50-9883-abc91dc9e75e"",
                    ""path"": ""1DAxis(minValue=-5,maxValue=5)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""11665643-4423-4701-8589-1ef9a040a313"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""33ee3462-846e-4f79-a984-0b4c41777b1d"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b76c395b-2c1a-49ff-ad78-80b0311b9d60"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ded08f05-a454-4c68-abfc-99afb023cf4e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77b31f4e-41b6-4bb9-bb81-0a3e84b511a3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""EraseDrag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0eaa7f4a-5d41-4782-8abc-5f5c41ab09b1"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Next Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f5da426a-0eb6-4e0b-8d32-5da06da44b7f"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Deselect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14a00692-2be6-4295-8513-e22b59cffbba"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f6c260c-9965-4aa2-8f9d-9bce823913f3"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Debug"",
            ""id"": ""37881d07-6198-4831-b486-3a4aae7077fb"",
            ""actions"": [
                {
                    ""name"": ""DebugConsole"",
                    ""type"": ""Button"",
                    ""id"": ""4768838a-4222-49e8-afca-f0c3cd7f4551"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Send"",
                    ""type"": ""Button"",
                    ""id"": ""d22a7bc2-1074-475f-8db4-77a5199cae7f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Redo"",
                    ""type"": ""Button"",
                    ""id"": ""1f76d51e-1f6e-4139-b5f8-070b72077cf1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""834ccb04-fffb-43e2-8bfd-011ba9d294b9"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""DebugConsole"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51adec81-5317-46c4-bfc5-087d22a458b4"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Send"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""018f02ac-166b-4589-8071-331752d913d7"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Redo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menus"",
            ""id"": ""1f282deb-9fb2-4337-9ae6-de7e102b0b78"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""313a618d-533e-4115-9180-d69593a3c622"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""386cac7f-301c-4ffc-9765-9b06ba4a8bbf"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": []
        }
    ]
}");
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_Up = m_Game.FindAction("Up", throwIfNotFound: true);
        m_Game_Left = m_Game.FindAction("Left", throwIfNotFound: true);
        m_Game_Right = m_Game.FindAction("Right", throwIfNotFound: true);
        m_Game_Down = m_Game.FindAction("Down", throwIfNotFound: true);
        m_Game_Zoom = m_Game.FindAction("Zoom", throwIfNotFound: true);
        m_Game_Select = m_Game.FindAction("Select", throwIfNotFound: true);
        m_Game_Move = m_Game.FindAction("Move", throwIfNotFound: true);
        m_Game_EraseDrag = m_Game.FindAction("EraseDrag", throwIfNotFound: true);
        m_Game_NextTurn = m_Game.FindAction("Next Turn", throwIfNotFound: true);
        m_Game_Deselect = m_Game.FindAction("Deselect", throwIfNotFound: true);
        m_Game_MousePosition = m_Game.FindAction("MousePosition", throwIfNotFound: true);
        // Debug
        m_Debug = asset.FindActionMap("Debug", throwIfNotFound: true);
        m_Debug_DebugConsole = m_Debug.FindAction("DebugConsole", throwIfNotFound: true);
        m_Debug_Send = m_Debug.FindAction("Send", throwIfNotFound: true);
        m_Debug_Redo = m_Debug.FindAction("Redo", throwIfNotFound: true);
        // Menus
        m_Menus = asset.FindActionMap("Menus", throwIfNotFound: true);
        m_Menus_Pause = m_Menus.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Game
    private readonly InputActionMap m_Game;
    private IGameActions m_GameActionsCallbackInterface;
    private readonly InputAction m_Game_Up;
    private readonly InputAction m_Game_Left;
    private readonly InputAction m_Game_Right;
    private readonly InputAction m_Game_Down;
    private readonly InputAction m_Game_Zoom;
    private readonly InputAction m_Game_Select;
    private readonly InputAction m_Game_Move;
    private readonly InputAction m_Game_EraseDrag;
    private readonly InputAction m_Game_NextTurn;
    private readonly InputAction m_Game_Deselect;
    private readonly InputAction m_Game_MousePosition;
    public struct GameActions
    {
        private @Controls m_Wrapper;
        public GameActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_Game_Up;
        public InputAction @Left => m_Wrapper.m_Game_Left;
        public InputAction @Right => m_Wrapper.m_Game_Right;
        public InputAction @Down => m_Wrapper.m_Game_Down;
        public InputAction @Zoom => m_Wrapper.m_Game_Zoom;
        public InputAction @Select => m_Wrapper.m_Game_Select;
        public InputAction @Move => m_Wrapper.m_Game_Move;
        public InputAction @EraseDrag => m_Wrapper.m_Game_EraseDrag;
        public InputAction @NextTurn => m_Wrapper.m_Game_NextTurn;
        public InputAction @Deselect => m_Wrapper.m_Game_Deselect;
        public InputAction @MousePosition => m_Wrapper.m_Game_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void SetCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterface != null)
            {
                @Up.started -= m_Wrapper.m_GameActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnUp;
                @Left.started -= m_Wrapper.m_GameActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_GameActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnRight;
                @Down.started -= m_Wrapper.m_GameActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnDown;
                @Zoom.started -= m_Wrapper.m_GameActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnZoom;
                @Select.started -= m_Wrapper.m_GameActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnSelect;
                @Move.started -= m_Wrapper.m_GameActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnMove;
                @EraseDrag.started -= m_Wrapper.m_GameActionsCallbackInterface.OnEraseDrag;
                @EraseDrag.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnEraseDrag;
                @EraseDrag.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnEraseDrag;
                @NextTurn.started -= m_Wrapper.m_GameActionsCallbackInterface.OnNextTurn;
                @NextTurn.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnNextTurn;
                @NextTurn.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnNextTurn;
                @Deselect.started -= m_Wrapper.m_GameActionsCallbackInterface.OnDeselect;
                @Deselect.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnDeselect;
                @Deselect.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnDeselect;
                @MousePosition.started -= m_Wrapper.m_GameActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_GameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @EraseDrag.started += instance.OnEraseDrag;
                @EraseDrag.performed += instance.OnEraseDrag;
                @EraseDrag.canceled += instance.OnEraseDrag;
                @NextTurn.started += instance.OnNextTurn;
                @NextTurn.performed += instance.OnNextTurn;
                @NextTurn.canceled += instance.OnNextTurn;
                @Deselect.started += instance.OnDeselect;
                @Deselect.performed += instance.OnDeselect;
                @Deselect.canceled += instance.OnDeselect;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public GameActions @Game => new GameActions(this);

    // Debug
    private readonly InputActionMap m_Debug;
    private IDebugActions m_DebugActionsCallbackInterface;
    private readonly InputAction m_Debug_DebugConsole;
    private readonly InputAction m_Debug_Send;
    private readonly InputAction m_Debug_Redo;
    public struct DebugActions
    {
        private @Controls m_Wrapper;
        public DebugActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @DebugConsole => m_Wrapper.m_Debug_DebugConsole;
        public InputAction @Send => m_Wrapper.m_Debug_Send;
        public InputAction @Redo => m_Wrapper.m_Debug_Redo;
        public InputActionMap Get() { return m_Wrapper.m_Debug; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugActions set) { return set.Get(); }
        public void SetCallbacks(IDebugActions instance)
        {
            if (m_Wrapper.m_DebugActionsCallbackInterface != null)
            {
                @DebugConsole.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnDebugConsole;
                @DebugConsole.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnDebugConsole;
                @DebugConsole.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnDebugConsole;
                @Send.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnSend;
                @Send.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnSend;
                @Send.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnSend;
                @Redo.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnRedo;
                @Redo.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnRedo;
                @Redo.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnRedo;
            }
            m_Wrapper.m_DebugActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DebugConsole.started += instance.OnDebugConsole;
                @DebugConsole.performed += instance.OnDebugConsole;
                @DebugConsole.canceled += instance.OnDebugConsole;
                @Send.started += instance.OnSend;
                @Send.performed += instance.OnSend;
                @Send.canceled += instance.OnSend;
                @Redo.started += instance.OnRedo;
                @Redo.performed += instance.OnRedo;
                @Redo.canceled += instance.OnRedo;
            }
        }
    }
    public DebugActions @Debug => new DebugActions(this);

    // Menus
    private readonly InputActionMap m_Menus;
    private IMenusActions m_MenusActionsCallbackInterface;
    private readonly InputAction m_Menus_Pause;
    public struct MenusActions
    {
        private @Controls m_Wrapper;
        public MenusActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_Menus_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Menus; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenusActions set) { return set.Get(); }
        public void SetCallbacks(IMenusActions instance)
        {
            if (m_Wrapper.m_MenusActionsCallbackInterface != null)
            {
                @Pause.started -= m_Wrapper.m_MenusActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_MenusActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_MenusActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_MenusActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public MenusActions @Menus => new MenusActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface IGameActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnEraseDrag(InputAction.CallbackContext context);
        void OnNextTurn(InputAction.CallbackContext context);
        void OnDeselect(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
    public interface IDebugActions
    {
        void OnDebugConsole(InputAction.CallbackContext context);
        void OnSend(InputAction.CallbackContext context);
        void OnRedo(InputAction.CallbackContext context);
    }
    public interface IMenusActions
    {
        void OnPause(InputAction.CallbackContext context);
    }
}
